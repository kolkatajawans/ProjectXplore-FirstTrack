generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  name           String
  email          String   @unique
  password       String
  active         Boolean  @default(true)
  refreshToken   String?
  avatarUrl      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  roomsAsAuthor  Room[]   @relation("AuthorRooms")
  roomsAsMember  RoomMember[]
  projects       Project[] 
  comments       Comment[]
  projectLikes   ProjectLike[]
  commentLikes   CommentLike[]
  followers      Follower[] @relation("UserFollowing")
  following      Follower[] @relation("UserFollowers")
  
  authoredTasks  Task[]    @relation("TasksAuthored")
  assignedTasks  Task[]    @relation("TasksAssigned")
}

model Room {
  id             Int      @id @default(autoincrement())
  name           String?
  objective      String?
  authorId       Int
  author         User    @relation("AuthorRooms", fields: [authorId], references: [id])
  members        RoomMember[]
  projects       Project[]
  requests       Request[] // Add this field to reference Request
}


model RoomMember {
  roomId         Int
  userId         Int
  room           Room    @relation(fields: [roomId], references: [id])
  user           User    @relation(fields: [userId], references: [id])
  @@id([roomId, userId])
}

model Project {
  id             Int      @id @default(autoincrement())
  authorId       Int      
  author         User     @relation(fields: [authorId], references: [id])
  roomId         Int?     
  room           Room?    @relation(fields: [roomId], references: [id])
  name           String
  description    String
  links          Link[]   
  images         Image[]  
  comments       Comment[]
  projectLikes   ProjectLike[]
}

model Comment {
  id             Int      @id @default(autoincrement())
  content        String
  authorId       Int
  author         User     @relation(fields: [authorId], references: [id])
  projectId      Int
  project        Project  @relation(fields: [projectId], references: [id])
  createdAt      DateTime @default(now())
  commentLikes   CommentLike[]

  @@index([projectId])
}

model Link {
  id             Int      @id @default(autoincrement())
  url            String   
  projectId      Int
  project        Project  @relation(fields: [projectId], references: [id])
}

model Image {
  id             Int      @id @default(autoincrement())
  url            String
  projectId      Int
  project        Project  @relation(fields: [projectId], references: [id])
}

model ProjectLike {
  userId         Int
  projectId      Int
  user           User    @relation(fields: [userId], references: [id])
  project        Project @relation(fields: [projectId], references: [id])
  @@id([userId, projectId])
}

model CommentLike {
  userId         Int
  commentId      Int
  user           User    @relation(fields: [userId], references: [id])
  comment        Comment @relation(fields: [commentId], references: [id])
  @@id([userId, commentId])
}

model Follower {
  followerId     Int
  followingId    Int
  follower       User @relation("UserFollowing", fields: [followerId], references: [id])
  following      User @relation("UserFollowers", fields: [followingId], references: [id])
  @@id([followerId, followingId])
}

model Request {
  id          Int      @id @default(autoincrement())
  senderId    Int
  receiverId  Int
  roomId      Int?     // Add this field to reference the Room
  room        Room?    @relation(fields: [roomId], references: [id]) // Define the relation
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Task {
  id         Int      @id @default(autoincrement())
  content    String
  authorId   Int
  assignId   Int
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  author     User     @relation("TasksAuthored", fields: [authorId], references: [id])
  assignedTo User     @relation("TasksAssigned", fields: [assignId], references: [id])
}